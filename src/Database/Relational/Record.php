<?php
//******************************************************************************
//******************************************************************************
/**
 * Database Record Class
 *
 * @package         phpOpenFW
 * @author          Christian J. Clark
 * @copyright       Copyright (c) Christian J. Clark
 * @license         https://mit-license.org
 */
//******************************************************************************
//******************************************************************************

namespace phpOpenFW\Database\Relational;

use \phpOpenFW\Builders\SQL;

abstract class Record
{
    //==========================================================================
    // Class Members
    //==========================================================================
    protected $args = [];
    protected $data_source = false;
    protected $table = false;
    protected $select_view = false;
    protected $data = [];
    protected $is_valid = null;
    protected $status = null;
    protected $record_id = false;

    //==========================================================================
    //==========================================================================
    // Constructor
    //==========================================================================
    //==========================================================================
    public function __construct($wheres, Array $args=[], $data_source=false)
    {
        //----------------------------------------------------------------------
        // Check that class is configured correctly
        //----------------------------------------------------------------------
        if (!static::$table) {
            $this->is_valid = false;
            throw new \Exception('Database table is not set.');
            return false;
        }

        //----------------------------------------------------------------------
        // Set Object Args
        //----------------------------------------------------------------------
        $this->args = $args;

        //----------------------------------------------------------------------
        // Set Data Source
        //----------------------------------------------------------------------
        $this->SetDataSource($data_source);

        //----------------------------------------------------------------------
        // Attempt to pull record
        //----------------------------------------------------------------------
        $recs = $this->GetRecord($wheres);

        //----------------------------------------------------------------------
        // Validate Record
        //----------------------------------------------------------------------
        if ($recs) {
            $this->status = count($recs);
            if ($this->status == 1) {
                $this->is_valid = true;
                $this->data = current($recs);
                if (isset($this->data['id'])) {
                    $this->record_id = $this->data['id'];
                }
            }
            else {
                $this->is_valid = false;
            }
        }
        else {
            $this->status = 0;
            $this->is_valid = false;
        }
    }

    //==========================================================================
    //==========================================================================
    // Get an instance of this object
    //==========================================================================
    //==========================================================================
    public static function Instance($wheres, Array $args=[], $data_source=false)
    {
        if (is_scalar($args)) {
            $args = ['id' => $args];
        }
        if ($args) {
            return new static($wheres, $args, $data_source);
        }
    }

    //==========================================================================
    //==========================================================================
    // Is the Instance Valid
    //==========================================================================
    //==========================================================================
    public function IsValid()
    {
        return $this->is_valid;
    }

    //==========================================================================
    //==========================================================================
    // Get Status
    //==========================================================================
    //==========================================================================
    public function Status()
    {
        return $this->status;
    }

    //==========================================================================
    //==========================================================================
    // Check if Instance is Valid
    //==========================================================================
    //==========================================================================
    public function CheckIsValid($msg='')
    {
        if ($msg == '') {
            $msg = 'Invalid record instance.';
        }
        if (!$this->is_valid) {
            throw new \Exception($msg);
        }
        return true;
    }

    //==========================================================================
    //==========================================================================
    // Get Data
    //==========================================================================
    //==========================================================================
    public function GetData()
    {
        return $this->data;
    }

    //%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    //%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    // Internal Methods
    //%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    //%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

    //==========================================================================
    //==========================================================================
    // Set Data Source
    //==========================================================================
    //==========================================================================
    protected function SetDataSource($data_source)
    {
        if ($data_source) {
            $this->data_source = $data_source;
        }
        else if (!empty($this->args['data_source'])) {
            $this->data_source = $this->args['data_source'];
        }
        //$this->ds_obj = \phpOpenFW\Core\DataSources::GetOneOrDefault($this->data_source);
    }

    //==========================================================================
    //==========================================================================
    // Determine Table
    //==========================================================================
    //==========================================================================
    protected function DetermineTable()
    {
        $tmp_table = $this->table;
        return $tmp_table;
    }

    //==========================================================================
    //==========================================================================
    // Get Record
    //==========================================================================
    //==========================================================================
    protected function GetRecord($wheres, Array $args)
    {
        //----------------------------------------------------------------------
        // Was an ID passed?
        //----------------------------------------------------------------------
        if (is_scalar($wheres) && is_numeric($wheres)) {
            $wheres = ['id' => $wheres];
        }
        //----------------------------------------------------------------------
        // Args must be an array
        //----------------------------------------------------------------------
        if (!is_array($wheres)) {
            $msg = 'Invalid arguments passed for querying database record. Record ID or array of field / values required.';
            throw new \Exception($msg);
        }

        //----------------------------------------------------------------------
        // Determine Table or View
        //----------------------------------------------------------------------
        $tmp_table = $this->DetermineTable();

        //----------------------------------------------------------------------
        // Start Query
        //----------------------------------------------------------------------
        $query = SQL::Select($tmp_table, $this->data_source)
        ->Select($tmp_table . '.*');

        //----------------------------------------------------------------------
        // Set where conditions from array
        //----------------------------------------------------------------------
        foreach ($wheres as $key => $val) {
            $query->Where($key, $val);
        }

        //----------------------------------------------------------------------
        // Limit 2 / Execute
        //----------------------------------------------------------------------
        $query->Limit(2);
        return $query->Execute();
    }
}
