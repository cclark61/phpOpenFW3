<?php
//*****************************************************************************
//*****************************************************************************
/**
 * Stream Range Trait
 *
 * @package         phpopenfw/phpopenfw3
 * @author          Christian J. Clark
 * @copyright       Copyright (c) Christian J. Clark
 * @website         https://phpopenfw.org
 * @license         https://mit-license.org
 **/
//*****************************************************************************
//*****************************************************************************

namespace phpOpenFW\Content\Stream;

//*****************************************************************************
/**
 * Range Trait
 */
//*****************************************************************************
trait Range
{
    //=========================================================================
    // Trait Members
    //=========================================================================

    //=========================================================================
    //=========================================================================
    // Stream Ranges
    //=========================================================================
    //=========================================================================
    protected function StreamRanges()
    {
        //---------------------------------------------------------------------
        // Output Headers?
        //---------------------------------------------------------------------
        if ($this->output_headers) {
            $this->OutputPartialContentHeader();
            header('Accept-Ranges: bytes');
            if ($this->multiple_ranges) {
                header('Content-Range: multipart/byteranges; boundary=range_divider');
            }
            $this->OutputContentTypeHeader();
            $this->OutputContentDispositionHeader();
        }

        //---------------------------------------------------------------------
        // Output Ranges
        //---------------------------------------------------------------------
        ob_start();
        $range_count = 0;
        foreach ($this->ranges as $range) {
            if ($this->OutputRange($range)) {
                $range_count++;
            }
        }
        print ob_get_clean();

        //---------------------------------------------------------------------
        // Return Number of Ranges
        //---------------------------------------------------------------------
        return $range_count;
    }

    //=========================================================================
    //=========================================================================
    // Output Range
    //=========================================================================
    //=========================================================================
    protected function OutputRange(Array $range)
    {
        //-----------------------------------------------------------------
        // Get Content Length
        //-----------------------------------------------------------------
        $content_length = $this->GetRangeSize($range);

        //-----------------------------------------------------------------
        // Range Divider
        //-----------------------------------------------------------------
        if ($this->multiple_ranges) {
            print "--range_divider\n";
            $this->OutputContentTypeHeader();
        }
        $tmp_size = ($this->file_size) ?: ('*');
        header("Content-Length: {$content_length}");
        header("Content-Range: bytes {$range[0]}-{$range[1]}/{$tmp_size}");

        //-----------------------------------------------------------------
        // Stream Range
        //-----------------------------------------------------------------
        print stream_get_contents($this->stream, $content_length, $range[0]);

        //-----------------------------------------------------------------
        // Return Range Size
        //-----------------------------------------------------------------
        return $content_length;
    }

    //=========================================================================
    //=========================================================================
    // Get Range Size
    //=========================================================================
    //=========================================================================
    protected function GetRangeSize(Array $range)
    {
        return ($range[1] - $range[0]) + 1;
    }

    //=========================================================================
    //=========================================================================
    // Output Partial Content Header
    //=========================================================================
    //=========================================================================
    protected function OutputPartialContentHeader()
    {
        if ($this->multiple_ranges) {
            header('HTTP/1.1 206 Partial Content');
            return true;
        }
        else {
            $range_size = $this->GetRangeSize($this->ranges[0]);
            if ($this->file_size && $this->file_size > $range_size) {
                header('HTTP/1.1 206 Partial Content');
                return true;
            }
        }
        return false;
    }
}
