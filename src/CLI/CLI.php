<?php
//*****************************************************************************
//*****************************************************************************
/**
 * Command Line Interface Class
 *
 * @package         phpOpenFW
 * @author          Christian J. Clark
 * @copyright       Copyright (c) Christian J. Clark
 * @license         https://mit-license.org
 **/
//*****************************************************************************
//*****************************************************************************

namespace phpOpenFW\CLI;

//*****************************************************************************
/**
 * CLI Class
 */
//*****************************************************************************
class CLI
{
    //*************************************************************************
    //*************************************************************************
    // Class Members
    //*************************************************************************
    //*************************************************************************
    protected $app_path = false;
    protected $config = [];
    protected $args = [];
    protected $mod_title = false;

    //*************************************************************************
    //*************************************************************************
    // Get Instanace
    //*************************************************************************
    //*************************************************************************
    public static function GetInstance($app_path, $raw_args)
    {
        //=====================================================================
        // Valid Environment?
        //=====================================================================
        if (strtoupper(php_sapi_name()) != 'CLI') {
            self::PrintError('Invalid environment.');
            exit;
        }
        //=====================================================================
        // Validate App Path
        //=====================================================================
        if (!is_dir($app_path)) {
            self::PrintError('Invalid application path.');
            return false;
        }

        //=====================================================================
        // Parse Arguments
        //=====================================================================
        if (!$args = self::ParseArgs($raw_args)) {
            self::PrintError('Invalid arguments.');
            return false;
        }

        //=====================================================================
        // Return New CLI Object
        //=====================================================================
        return new static($app_path, $args);
    }

    //*************************************************************************
    //*************************************************************************
    // Constructor
    //*************************************************************************
    //*************************************************************************
    public function __construct($app_path, Array $args=[])
    {
        //=====================================================================
        // Initialize App
        //=====================================================================
        $this->app_path = $app_path;
        define('CLI_APP_ROOT', $app_path);
        $this->args = $args;

        //=====================================================================
        // Initialize phpOpenFW
        //=====================================================================
        \phpOpenFW\Core::Bootstrap($app_path, [
            'load_config' => true,
            'load_data_sources' => true
        ]);

        //=====================================================================
        // Load Configuration
        //=====================================================================
        $this->config = new \phpOpenFW\Core\AppConfig();
    }

    //*************************************************************************
    //*************************************************************************
    // Run Job
    //*************************************************************************
    //*************************************************************************
    public function Run()
    {
        self::PrintWarning('No Run method.');
    }

    //*************************************************************************
    //*************************************************************************
    // Run Job
    //*************************************************************************
    //*************************************************************************
    protected static function SetEnv()
    {
        //---------------------------------------------------------
        // Environment from CLI
        //---------------------------------------------------------
        if (!empty($this->args['env'])) {
            define('ENV', $this->args['env']);
        }
        //---------------------------------------------------------
        // Environment from Config
        //---------------------------------------------------------
        else if (!empty($this->config['env'])) {
            define('ENV', $this->config['env']);
        }
        //---------------------------------------------------------
        // Environment from GLOBALS
        //---------------------------------------------------------
        else if (!empty($GLOBALS['env'])) {
            define('ENV', $GLOBALS['env']);
        }

        //---------------------------------------------------------
        // Display Environment
        //---------------------------------------------------------
        if (defined('ENV')) {
            $env = ENV;
            $tmp_msg = "Environment is '{$env}'";
            self::PrintMessage($tmp_msg, 0, '*');
        }
    }

    //*************************************************************************
    //*************************************************************************
    // Parse Arguments
    //*************************************************************************
    //*************************************************************************
    protected static function ParseArgs($args)
    {
        //print_r($args);
        $num_args = count($args);
        $new_args = array();
        $open_arg = false;
        for ($i = 1; $i < $num_args; $i++) {

            //------------------------------------------------------
            // Current Argument
            //------------------------------------------------------
            $arg = $args[$i];

            //------------------------------------------------------
            // Next Argument
            //------------------------------------------------------
            $next_arg = (isset($args[$i+1])) ? ($args[$i+1]) : (false);

            //------------------------------------------------------
            // Current Argument's First Character
            //------------------------------------------------------
            $arg_1char = substr($arg, 0, 1);

            //------------------------------------------------------
            // Current Argument's First Two Characters
            //------------------------------------------------------
            $arg_2char = substr($arg, 0, 2);

            //------------------------------------------------------
            // Parse Switches
            //------------------------------------------------------
            if ($arg_1char == '-' && strlen($arg) == 2) {
                $switch = substr($arg, 1);
                if (strlen($switch) > 1) {
                    $switches = str_split($switch);
                    foreach ($switches as $curr_sw) {
                        $new_args[$curr_sw] = false;
                    }
                    $open_arg = $curr_sw;
                }
                else {
                    $open_arg = $switch;
                    $new_args[$switch] = false;
                }
            }
            else if ($arg_2char == '--') {
                $switch = substr($arg, 2);
                $open_arg = $switch;
                $new_args[$switch] = false;
            }
            //------------------------------------------------------
            // Parse Switches
            //------------------------------------------------------
            else {
                if ($open_arg) {
                    $new_args[$open_arg] = $arg;
                    $open_arg = false;
                }
                else {
                    $new_args['loose_args'][] = $arg;
                }
            }
        }
        return $new_args;
    }

    //#########################################################################
    //#########################################################################
    // Message Printing Methods
    //#########################################################################
    //#########################################################################

    //*************************************************************************
    //*************************************************************************
    // Print Title
    //*************************************************************************
    //*************************************************************************
    protected static function PrintTitle($title)
    {
        if ($mod_title) {
            print "\n**********************************************************************\n";
            print ">>>>> {$mod_title} <<<<<";
            print "\n**********************************************************************\n";
        }
    }

    //*************************************************************************
    //*************************************************************************
    // Print Output Header
    //*************************************************************************
    //*************************************************************************
    protected static function PrintOutputHeader($text='', $fg_color=null, $bg_color=null)
    {
        if (!$text) {
            $text = 'Job Output';
        }
        $msg = "\n**********************************************************************";
        $msg .= "\n*** {$text}";
        $msg .= "\n**********************************************************************\n";
        print self::ColoredMessage($msg, $fg_color, $bg_color);
    }

    //*************************************************************************
    //*************************************************************************
    // Print Confirmation
    //*************************************************************************
    //*************************************************************************
    protected static function PrintConfirmation($msg, $depth=0, $fg_color='green', $bg_color=null)
    {
        self::PrintMessage($msg, $depth, '[ok]', $fg_color, $bg_color);
    }

    //*************************************************************************
    //*************************************************************************
    // Print Warning
    //*************************************************************************
    //*************************************************************************
    protected static function PrintWarning($msg, $depth=0, $fg_color='yellow', $bg_color=null)
    {
        self::PrintMessage($msg, $depth, '[!!]', $fg_color, $bg_color);
    }

    //*************************************************************************
    //*************************************************************************
    // Print Error
    //*************************************************************************
    //*************************************************************************
    protected static function PrintError($msg, $depth=0, $fg_color='red', $bg_color=null)
    {
        self::PrintMessage($msg, $depth, "\n** [ERROR] ** :", $fg_color, $bg_color);
    }

    //*************************************************************************
    //*************************************************************************
    // Print Message
    //*************************************************************************
    //*************************************************************************
    protected static function PrintMessage($msg, $depth=0, $prefix='', $fg_color=null, $bg_color=null)
    {
        $tabs = '';
        if ($depth) {
            $tabs = str_pad('', $depth, "\t", STR_PAD_LEFT);
        }
        if ($tabs) {
            $msg = $tabs . $msg;
        }
        if ($prefix) {
            $msg = $prefix . ' ' . $msg;
        }
        print self::ColoredMessage($msg, $fg_color, $bg_color) . "\n";
    }

    //*************************************************************************
    //*************************************************************************
    // Print Error and Exit
    //*************************************************************************
    //*************************************************************************
    protected static function PrintErrorExit($msg, $fg_color='red', $bg_color=null)
    {
        self::PrintError($msg, 0, $fg_color, $bg_color);

        $msg = "\n**********************************************************************";
        $msg .= "\n*** Exited with Error";
        $msg .= "\n**********************************************************************\n\n";
        print self::ColoredMessage($msg, $fg_color, $bg_color);
        exit;
    }

    //*************************************************************************
    //*************************************************************************
	// Colored Message
    //*************************************************************************
    //*************************************************************************
	protected static function ColoredMessage($msg, $fg_color=null, $bg_color=null)
	{
		$fg_colors = [
		    'black'         => '0;30',
		    'dark_gray'     => '1;30',
		    'blue'          => '0;34',
		    'light_blue'    => '1;34',
		    'green'         => '0;32',
		    'light_green'   => '1;32',
		    'cyan'          => '0;36',
		    'light_cyan'    => '1;36',
		    'red'           => '0;31',
		    'light_red'     => '1;31',
		    'purple'        => '0;35',
		    'light_purple'  => '1;35',
		    'brown'         => '0;33',
		    'yellow'        => '1;33',
		    'light_gray'    => '0;37',
		    'white'         => '1;37',
		];    
        $bg_colors = [
            'black'         => '40',
            'red'           => '41',
            'green'         => '42',
            'yellow'        => '43',
            'blue'          => '44',
            'magenta'       => '45',
            'cyan'          => '46',
            'light_gray'    => '47'
        ];

		$colors = '';
		if (isset($fg_colors[$fg_color])) {
			$colors .= "\033[" . $fg_colors[$fg_color] . "m";
		}
		if (isset($bg_colors[$bg_color])) {
			$colors .= "\033[" . $bg_colors[$bg_color] . "m";
		}

		if ($colors) {
    		return "{$colors}{$msg}\033[0m";
        }

		return $msg;
	}

}
