<?php
//*****************************************************************************
//*****************************************************************************
/**
 * CLI Custom Methods Trait
 *
 * @package         phpOpenFW
 * @author          Christian J. Clark
 * @copyright       Copyright (c) Christian J. Clark
 * @license         https://mit-license.org
 **/
//*****************************************************************************
//*****************************************************************************

namespace phpOpenFW\CLI\Traits;

//*****************************************************************************
/**
 * CustomMethods Trait
 */
//*****************************************************************************
trait CustomMethods
{
    //*************************************************************************
    //*************************************************************************
    // Class Members
    //*************************************************************************
    //*************************************************************************
    protected $app_namespace = false;
    protected $custom_methods = [];
    protected $auto_custom_methods = true;

    //*************************************************************************
    //*************************************************************************
    // Set Namespace
    //*************************************************************************
    //*************************************************************************
    public function SetNamespace($ns)
    {
        if (!is_scalar($ns) || is_numeric($ns)) {
            throw new \Exception('Invalid namespace.');
        }
        $this->app_namespace = $ns;
    }

    //*************************************************************************
    //*************************************************************************
    // Custom Method Exists?
    //*************************************************************************
    //*************************************************************************
    public function CustomMethodExists($name)
    {
        return (isset($this->custom_methods[$name]) && is_callable($this->custom_methods[$name]));
    }

    //*************************************************************************
    //*************************************************************************
    // Register Custom Method
    //*************************************************************************
    //*************************************************************************
    public function RegisterCustomMethod($name, $method, $overwrite=false)
    {
        if (!is_scalar($name) || is_numeric($name)) {
            throw new \Exception('Invalid custom method name.');
        }
        if ($this->CustomMethodExists($method) && !$overwrite) {
            throw new \Exception('Custom method already exists and overwrite flag is not enabled.');
        }
        if (!is_callable($method)) {
            throw new \Exception('Invalid custom method. Not callable.');
        }
        $this->custom_methods[$name] = $method;
    }

    //#########################################################################
    //#########################################################################
    // Internal Methods
    //#########################################################################
    //#########################################################################

    //*************************************************************************
    //*************************************************************************
    // Auto Register Custom Methods
    //*************************************************************************
    //*************************************************************************
    protected function AutoRegisterCustomMethods()
    {
        $ns = $this->app_namespace;
        if (is_callable($ns . '\CustomMethods::PreRun')) {
            $this->RegisterCustomMethod('PreRun', $ns . '\CustomMethods::PreRun');
        }
        if (is_callable($ns . '\CustomMethods::PostRun')) {
            $this->RegisterCustomMethod('PostRun', $ns . '\CustomMethods::PostRun');
        }
    }

    //#########################################################################
    //#########################################################################
    // Magic Methods
    //#########################################################################
    //#########################################################################

    //*************************************************************************
    //*************************************************************************
    // __Call
    //*************************************************************************
    //*************************************************************************
    public function __call($name, $arguments)
    {
        if ($this->CustomMethodExists($name)) {
            return call_user_func_array($this->custom_methods[$name], $arguments);
        }
        throw new \Exception('Unknown class method.');
    }

}
