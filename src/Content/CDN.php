<?php
//*****************************************************************************
//*****************************************************************************
/**
 * Content Delivery Plugin
 *
 * @package         phpopenfw/phpopenfw3
 * @author          Christian J. Clark
 * @copyright       Copyright (c) Christian J. Clark
 * @website         https://phpopenfw.org
 * @license         https://mit-license.org
 **/
//*****************************************************************************
//*****************************************************************************

namespace phpOpenFW\Content;
use \phpOpenFW\Helpers\FilePath;

//*****************************************************************************
/**
 * Content Delivery Class
 */
//*****************************************************************************
class CDN
{
    //*************************************************************************
    //*************************************************************************
    // Output Content Type Header
    //*************************************************************************
    //*************************************************************************
    public static function OutputContentType($file, Array $args=[])
    {
        //---------------------------------------------------------------------
        // Extract Args
        //---------------------------------------------------------------------
        extract($args, EXTR_SKIP);

        //---------------------------------------------------------------------
        // Is content type set?
        //---------------------------------------------------------------------
        if (!empty($content_type) && empty($mime_type)) {
            $mime_type = $content_type;
        }

        //---------------------------------------------------------------------
        // Get Mime Type
        //---------------------------------------------------------------------
        if (empty($mime_type) && $file) {
            $mime_type = FilePath::GetMimeType($file);
        }

        //---------------------------------------------------------------------
        // Did we get a mime type?
        //---------------------------------------------------------------------
        if ($mime_type) {
            header('Content-type: ' . $mime_type);
            $ext = FilePath::GetExtension($file);
            if ($ext == 'svgz') {
                header('Content-Encoding: gzip');
            }
            return true;
        }

        //---------------------------------------------------------------------
        // No content type found
        //---------------------------------------------------------------------
        return false;
    }

    //*************************************************************************
    //*************************************************************************
    // Output Stream
    //*************************************************************************
    //*************************************************************************
    public static function OutputStream($stream, Array $args=[])
    {
        //=====================================================================
        // Defaults / Extract Args
        //=====================================================================
        $output_header = false;
        $is_base64 = false;
        $file_name = false;
        extract($args);
        $header = false;

        //=====================================================================
        // Validate Resource is Stream...
        //=====================================================================
        if (get_resource_type($stream) != 'stream') {
            return false;
        }

        //=====================================================================
        // Check if one or more ranges have been specified
        //=====================================================================
        $ranges = \phpOpenFW\HTTP\Request::GetRequestRanges($args);

        //=====================================================================
        // Output Headers: Yes
        //=====================================================================
        if (!empty($output_header)) {

            //-----------------------------------------------------------------
            // Pull the First Chunk (100 Characters)
            //-----------------------------------------------------------------
            $first_chunk = stream_get_contents($stream, 100);

            //-----------------------------------------------------------------
            // Is this a Data URI Scheme Header?
            //-----------------------------------------------------------------
            $dus_data = self::ParseDataURISchemeHeader($first_chunk);
            extract($dus_data, EXTR_SKIP);

            //-----------------------------------------------------------------
            // Update First Chunk (header has been removed)
            //-----------------------------------------------------------------
            if (!empty($dus_data['chunk'])) {
                $first_chunk = $dus_data['chunk'];
            }

            //-----------------------------------------------------------------
            // Output Content Type Header
            //-----------------------------------------------------------------
            $ct_args = [];
            if (!empty($content_type)) {
                $ct_args['content_type'] = $content_type;
            }
            static::OutputContentType($file_name, $ct_args);

            //-----------------------------------------------------------------
            // Content Disposition
            //-----------------------------------------------------------------
            if (!empty($args['content_disposition'])) {
                header('Content-Disposition: ' . $args['content_disposition']);
            }
            else if (!empty($args['force_download'])) {
                $cont_disp = 'Content-Disposition: attachment;';
                if ($file_name) {
                    $cont_disp .= ' filename=' . $file_name . ';';
                }
                header($cont_disp);
            }
        }

        //=====================================================================
        // Output Stream Contents
        //=====================================================================

        //---------------------------------------------------------------------
        // Start Buffering
        //---------------------------------------------------------------------
        ob_start();

        //---------------------------------------------------------------------
        // Rewind if the first chunk was read
        //---------------------------------------------------------------------
        if (!empty($first_chunk)) {
            //print $first_chunk;
            rewind($stream);
        }

        //---------------------------------------------------------------------
        // No Ranges? Stream entire file
        //---------------------------------------------------------------------
        if (!$ranges) {
            print stream_get_contents($stream);
        }
        //---------------------------------------------------------------------
        // Range(s) Specified
        //---------------------------------------------------------------------
        else {
            static::OutputRanges($stream, $ranges, $args);
        }

        //---------------------------------------------------------------------
        // End Buffering and Output Contents
        //---------------------------------------------------------------------
        if (!empty($is_base64)) {
            print base64_decode(ob_get_clean());
        }
        else {
            print ob_get_clean();
        }

        //---------------------------------------------------------------------
        // Return true for success
        //---------------------------------------------------------------------
        return true;
    }

    //*************************************************************************
    //*************************************************************************
    // Parse Data URI Scheme Header
    //*************************************************************************
    // !!! Deprecated
    //*************************************************************************
    //*************************************************************************
    public static function ParseDataURISchemeHeader($chunk)
    {
        return \phpOpenFW\Data\UriScheme::ParseHeader($chunk);
    }

    //%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    //%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    // Protected / Internal Methods
    //%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    //%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

    //*************************************************************************
    //*************************************************************************
    // Output Ranges
    //*************************************************************************
    //*************************************************************************
    protected static function OutputRanges($stream, Array $ranges, Array $args=[])
    {
        //-----------------------------------------------------------------
        // Partial Content Header
        //-----------------------------------------------------------------
        header('HTTP/1.1 206 Partial Content');
        header('Accept-Ranges: bytes');
        $multiple_ranges = false;
        if (count($ranges) > 1) {
            header('Content-Range: multipart/byteranges; boundary=range_divider');
            $multiple_ranges = true;
        }

        //-----------------------------------------------------------------
        // Output Each Range
        //-----------------------------------------------------------------
        ob_start();
        foreach ($ranges as $range) {
            if ($multiple_ranges) {
                print "--range_divider\n";
            }
            static::OutputRange($stream, $range, $args);
        }

    }

    //*************************************************************************
    //*************************************************************************
    // Output Range
    //*************************************************************************
    //*************************************************************************
    protected static function OutputRange($stream, Array $range, Array $args=[])
    {
        //-----------------------------------------------------------------
        // Output Range
        //-----------------------------------------------------------------
        ob_start();

        //-----------------------------------------------------------------
        // Return Range Size
        //-----------------------------------------------------------------
        return $range_size;
    }

    //*************************************************************************
    //*************************************************************************
    // Print Range Headers
    //*************************************************************************
    //*************************************************************************
    protected static function PrintRangeHeaders(Array $range, Array $args=[])
    {
        //---------------------------------------------------------------------
        // Variables / Defaults
        //---------------------------------------------------------------------
        $file_size = (!empty($args['file_size'])) ? ($args['file_size']) : (false);

        //---------------------------------------------------------------------
        // Start Headers
        //---------------------------------------------------------------------
        $headers = [];

        //---------------------------------------------------------------------
        // ...
        //---------------------------------------------------------------------
        

        //---------------------------------------------------------------------
        // Print Headers
        //---------------------------------------------------------------------
        foreach ($headers as $header) {
            header($header);
        }

        //---------------------------------------------------------------------
        // Return number of headers
        //---------------------------------------------------------------------
        return count($headers);
    }
}
