<?php
//*****************************************************************************
//*****************************************************************************
/**
 * Core Command Line Interface Trait
 *
 * @package         phpOpenFW
 * @author          Christian J. Clark
 * @copyright       Copyright (c) Christian J. Clark
 * @license         https://mit-license.org
 **/
//*****************************************************************************
//*****************************************************************************

namespace phpOpenFW\CLI\Traits;

//*****************************************************************************
/**
 * CLI Trait
 */
//*****************************************************************************
trait CoreCLI
{
    //*************************************************************************
    //*************************************************************************
    // Traits
    //*************************************************************************
    //*************************************************************************
    use \phpOpenFW\Traits\Opts;

    //*************************************************************************
    //*************************************************************************
    // Class Members
    //*************************************************************************
    //*************************************************************************
    protected $app_path = false;
    protected $app_namespace = false;
    protected $config = false;
    protected $args = [];
    protected $custom_methods = [];
    protected $auto_custom_methods = true;

    //*************************************************************************
    //*************************************************************************
    // Get Instanace
    //*************************************************************************
    //*************************************************************************
    public static function GetInstance($app_path='', Array $args=[])
    {
        //=====================================================================
        // Return New CLI Object
        //=====================================================================
        return new static($app_path, $args);
    }

    //*************************************************************************
    //*************************************************************************
    // Constructor
    //*************************************************************************
    //*************************************************************************
    public function __construct($app_path, Array $args=[])
    {
        //=====================================================================
        // Valid Environment?
        //=====================================================================
        if (strtoupper(php_sapi_name()) != 'CLI') {
            self::PrintError('Invalid environment.');
            exit;
        }

        //=====================================================================
        // Check / Validate App Path and Args
        //=====================================================================
        if (is_array($app_path) && !$args) {
            $args = $app_path;
            $app_path = getcwd();
        }
        else if (!$app_path) {
            $app_path = getcwd();
        }

        //=====================================================================
        // Validate App Path
        //=====================================================================
        if (!is_dir($app_path)) {
            self::PrintError('Invalid application path.');
            return false;
        }

        //=====================================================================
        // Parse Arguments
        //=====================================================================
        if (!$args = self::ParseArgs($args)) {
            self::PrintError('Invalid arguments.');
            return false;
        }

        //=====================================================================
        // Initialize App
        //=====================================================================
        $this->app_path = $app_path;
        define('APP_PATH', $app_path);
        $this->args = $args;

        //=====================================================================
        // Initialize phpOpenFW
        //=====================================================================
        \phpOpenFW\Core::Bootstrap($app_path, [
            'load_config' => true,
            'load_data_sources' => true
        ]);

        //=====================================================================
        // Load Configuration
        //=====================================================================
        $this->config = new \phpOpenFW\Core\AppConfig();

        //=====================================================================
        // Namespace Set?
        //=====================================================================
        if (isset($this->config->app_namespace)) {
            $this->SetNamespace($this->config->app_namespace);
        }

        //=====================================================================
        // Check for Configuration Options
        //=====================================================================
        if (isset($this->config->auto_custom_methods)) {
            $this->auto_custom_methods = $this->config->auto_custom_methods;
        }

        //=====================================================================
        // Auto Register Custom Methods?
        //=====================================================================
        if ($this->auto_custom_methods && $this->app_namespace) {
            $this->AutoRegisterCustomMethods();
        }
    }

    //*************************************************************************
    //*************************************************************************
    // Set Namespace
    //*************************************************************************
    //*************************************************************************
    public function SetNamespace($ns)
    {
        if (!is_scalar($ns) || is_numeric($ns)) {
            throw new \Exception('Invalid namespace.');
        }
        $this->app_namespace = $ns;
    }

    //*************************************************************************
    //*************************************************************************
    // Custom Method Exists?
    //*************************************************************************
    //*************************************************************************
    public function CustomMethodExists($name)
    {
        return (isset($this->custom_methods[$name]) && is_callable($this->custom_methods[$name]));
    }

    //*************************************************************************
    //*************************************************************************
    // Register Custom Method
    //*************************************************************************
    //*************************************************************************
    public function RegisterCustomMethod($name, $method, $overwrite=false)
    {
        if (!is_scalar($name) || is_numeric($name)) {
            throw new \Exception('Invalid custom method name.');
        }
        if ($this->CustomMethodExists($method) && !$overwrite) {
            throw new \Exception('Custom method already exists and overwrite flag is not enabled.');
        }
        if (!is_callable($method)) {
            throw new \Exception('Invalid custom method. Not callable.');
        }
        $this->custom_methods[$name] = $method;
    }

    //*************************************************************************
    //*************************************************************************
    // Run Job
    //*************************************************************************
    //*************************************************************************
    public function Run()
    {
        self::PrintWarning('No Run method.');
    }

    //#########################################################################
    //#########################################################################
    // Message Printing Methods
    //#########################################################################
    //#########################################################################

    //*************************************************************************
    //*************************************************************************
    // Print Title
    //*************************************************************************
    //*************************************************************************
    public static function PrintTitle($title)
    {
        if ($title) {
            print "\n**********************************************************************\n";
            print ">>>>> {$title} <<<<<";
            print "\n**********************************************************************\n";
        }
    }

    //*************************************************************************
    //*************************************************************************
    // Print Output Header
    //*************************************************************************
    //*************************************************************************
    public static function PrintHeader($text='', $fg_color=null, $bg_color=null)
    {
        if (!$text) {
            return false;
        }
        $msg = "\n**********************************************************************";
        $msg .= "\n*** {$text}";
        $msg .= "\n**********************************************************************\n";
        print self::ColoredMessage($msg, $fg_color, $bg_color);
        return true;
    }

    //*************************************************************************
    //*************************************************************************
    // Print Information
    //*************************************************************************
    //*************************************************************************
    public static function PrintInformation($msg, $depth=0, $fg_color='blue', $bg_color=null)
    {
        self::PrintMessage($msg, $depth, '[Info]', $fg_color, $bg_color);
    }

    //*************************************************************************
    //*************************************************************************
    // Print Confirmation
    //*************************************************************************
    //*************************************************************************
    public static function PrintConfirmation($msg, $depth=0, $fg_color='green', $bg_color=null)
    {
        self::PrintMessage($msg, $depth, '[ok]', $fg_color, $bg_color);
    }

    //*************************************************************************
    //*************************************************************************
    // Print Warning
    //*************************************************************************
    //*************************************************************************
    public static function PrintWarning($msg, $depth=0, $fg_color='yellow', $bg_color=null)
    {
        self::PrintMessage($msg, $depth, '[!!]', $fg_color, $bg_color);
    }

    //*************************************************************************
    //*************************************************************************
    // Print Error
    //*************************************************************************
    //*************************************************************************
    public static function PrintError($msg, $depth=0, $fg_color='red', $bg_color=null)
    {
        self::PrintMessage($msg, $depth, "[ERROR]", $fg_color, $bg_color);
    }

    //*************************************************************************
    //*************************************************************************
    // Print Bullet
    //*************************************************************************
    //*************************************************************************
    public static function PrintBullet($msg, $depth=0, $fg_color=null, $bg_color=null)
    {
        self::PrintMessage($msg, $depth, "->", $fg_color, $bg_color);
    }

    //*************************************************************************
    //*************************************************************************
    // Print Bullet
    //*************************************************************************
    //*************************************************************************
    public static function PrintLine($msg, $depth=0, $fg_color=null, $bg_color=null)
    {
        self::PrintMessage($msg, $depth, '', $fg_color, $bg_color);
    }

    //*************************************************************************
    //*************************************************************************
    // Print Message
    //*************************************************************************
    //*************************************************************************
    public static function PrintMessage($msg, $depth=0, $prefix='', $fg_color=null, $bg_color=null)
    {
        $tabs = '';
        if ($depth) {
            $tabs = str_pad('', $depth, "\t", STR_PAD_LEFT);
        }
        if ($tabs) {
            $msg = $tabs . $msg;
        }
        if ($prefix) {
            $msg = $prefix . ' ' . $msg;
        }
        print self::ColoredMessage($msg, $fg_color, $bg_color) . "\n";
    }

    //*************************************************************************
    //*************************************************************************
    // Print Error and Exit
    //*************************************************************************
    //*************************************************************************
    public static function PrintErrorExit($msg, $fg_color='red', $bg_color=null)
    {
        self::PrintError($msg, 0, $fg_color, $bg_color);

        $msg = "\n**********************************************************************";
        $msg .= "\n*** Exited with Error";
        $msg .= "\n**********************************************************************\n\n";
        print self::ColoredMessage($msg, $fg_color, $bg_color);
        exit;
    }

    //*************************************************************************
    //*************************************************************************
    // Colored Message
    //*************************************************************************
    //*************************************************************************
    public static function ColoredMessage($msg, $fg_color=null, $bg_color=null)
    {
        $fg_colors = [
            'black'         => '0;30',
            'dark_gray'     => '1;30',
            'blue'          => '0;34',
            'light_blue'    => '1;34',
            'green'         => '0;32',
            'light_green'   => '1;32',
            'cyan'          => '0;36',
            'light_cyan'    => '1;36',
            'red'           => '0;31',
            'light_red'     => '1;31',
            'purple'        => '0;35',
            'light_purple'  => '1;35',
            'brown'         => '0;33',
            'yellow'        => '1;33',
            'light_gray'    => '0;37',
            'white'         => '1;37',
        ];
        $bg_colors = [
            'black'         => '40',
            'red'           => '41',
            'green'         => '42',
            'yellow'        => '43',
            'blue'          => '44',
            'magenta'       => '45',
            'cyan'          => '46',
            'light_gray'    => '47'
        ];

        $colors = '';
        if (isset($fg_colors[$fg_color])) {
            $colors .= "\033[" . $fg_colors[$fg_color] . "m";
        }
        if (isset($bg_colors[$bg_color])) {
            $colors .= "\033[" . $bg_colors[$bg_color] . "m";
        }

        if ($colors) {
            return "{$colors}{$msg}\033[0m";
        }

        return $msg;
    }

    //#########################################################################
    //#########################################################################
    // Internal Methods
    //#########################################################################
    //#########################################################################

    //*************************************************************************
    //*************************************************************************
    // Parse Arguments
    //*************************************************************************
    //*************************************************************************
    protected static function ParseArgs($args)
    {
        //print_r($args);
        $num_args = count($args);
        $new_args = array();
        $open_arg = false;
        for ($i = 1; $i < $num_args; $i++) {

            //------------------------------------------------------
            // Current Argument
            //------------------------------------------------------
            $arg = $args[$i];

            //------------------------------------------------------
            // Next Argument
            //------------------------------------------------------
            $next_arg = (isset($args[$i+1])) ? ($args[$i+1]) : (false);

            //------------------------------------------------------
            // Current Argument's First Character
            //------------------------------------------------------
            $arg_1char = substr($arg, 0, 1);

            //------------------------------------------------------
            // Current Argument's First Two Characters
            //------------------------------------------------------
            $arg_2char = substr($arg, 0, 2);

            //------------------------------------------------------
            // Parse Switches
            //------------------------------------------------------
            if ($arg_1char == '-' && strlen($arg) == 2) {
                $switch = substr($arg, 1);
                if (strlen($switch) > 1) {
                    $switches = str_split($switch);
                    foreach ($switches as $curr_sw) {
                        $new_args[$curr_sw] = false;
                    }
                    $open_arg = $curr_sw;
                }
                else {
                    $open_arg = $switch;
                    $new_args[$switch] = false;
                }
            }
            else if ($arg_2char == '--') {
                $switch = substr($arg, 2);
                $open_arg = $switch;
                $new_args[$switch] = false;
            }
            //------------------------------------------------------
            // Parse Switches
            //------------------------------------------------------
            else {
                if ($open_arg) {
                    $new_args[$open_arg] = $arg;
                    $open_arg = false;
                }
                else {
                    $new_args['loose_args'][] = $arg;
                }
            }
        }

        //---------------------------------------------------------------------
        // Is command set?
        //---------------------------------------------------------------------
        if (isset($new_args['loose_args'][0])) {
            $new_args['__command'] = $new_args['loose_args'][0];
        }
        else {
            $new_args['__command'] = false;
        }

        return $new_args;
    }

    //*************************************************************************
    //*************************************************************************
    // Set Environment
    //*************************************************************************
    //*************************************************************************
    protected function SetEnv()
    {
        //---------------------------------------------------------------------
        // Environment from CLI
        //---------------------------------------------------------------------
        if (!empty($this->args['env'])) {
            define('ENV', $this->args['env']);
        }
        //---------------------------------------------------------------------
        // Environment from Config
        //---------------------------------------------------------------------
        else if (!empty($this->config->env)) {
            define('ENV', $this->config->env);
        }
        //---------------------------------------------------------------------
        // Environment from GLOBALS
        //---------------------------------------------------------------------
        else if (!empty($GLOBALS['env'])) {
            define('ENV', $GLOBALS['env']);
        }

        //---------------------------------------------------------------------
        // Display Environment
        //---------------------------------------------------------------------
        if (defined('ENV')) {
            $env = ENV;
            $tmp_msg = "Environment is '{$env}'";
            self::PrintInformation($tmp_msg, 0, '*');
        }
    }

    //*************************************************************************
    //*************************************************************************
    // Set Run Mode
    //*************************************************************************
    //*************************************************************************
    protected function SetRunMode()
    {
        $run_mode = false;
        if (isset($this->args['run_mode'])) {
            $run_mode = $this->args['run_mode'];
            define('RUN_MODE', $run_mode);
            $tmp_msg = "Run Mode is '{$run_mode}'";
            self::PrintInformation($tmp_msg, 0);
        }
        define('RUN_MODE', $run_mode);
    }

    //*************************************************************************
    //*************************************************************************
    // Set Verbose
    //*************************************************************************
    //*************************************************************************
    protected function SetVerbose()
    {
        $verbose = (isset($this->args['v'])) ? (true) : (false);
        define('VERBOSE', $verbose);
        if ($verbose) {
            $tmp_msg = "Verbose output is ON";
            self::PrintInformation($tmp_msg, 0);
        }
    }

    //*************************************************************************
    //*************************************************************************
    // Auto Register Custom Methods
    //*************************************************************************
    //*************************************************************************
    protected function AutoRegisterCustomMethods()
    {
        $ns = $this->app_namespace;
        if (is_callable($ns . '\CustomMethods::PreRun')) {
            $this->RegisterCustomMethod('PreRun', $ns . '\CustomMethods::PreRun');
        }
        if (is_callable($ns . '\CustomMethods::PostRun')) {
            $this->RegisterCustomMethod('PostRun', $ns . '\CustomMethods::PostRun');
        }
    }

    //#########################################################################
    //#########################################################################
    // Magic Methods
    //#########################################################################
    //#########################################################################

    //*************************************************************************
    //*************************************************************************
    // __Call
    //*************************************************************************
    //*************************************************************************
    public function __call($name, $arguments)
    {
        if ($this->CustomMethodExists($name)) {
            return $this->custom_methods[$name]($arguments);
        }
        throw new \Exception('Uknown class method.');
    }

}
