<?php
//******************************************************************************
//******************************************************************************
/**
 * Database Type Class
 *
 * @package         phpOpenFW
 * @author          Christian J. Clark
 * @copyright       Copyright (c) Christian J. Clark
 * @license         https://mit-license.org
 */
//******************************************************************************
//******************************************************************************

namespace phpOpenFW\Database\Structure;
//use phpOpenFW\Database\DataTrans;

//******************************************************************************
/**
 * Database Type Class
 */
//******************************************************************************
class DatabaseType
{
    //==========================================================================
    // Class Members
    //==========================================================================
    protected $type = false;
    protected $type_class = false;

    //**************************************************************************
    //**************************************************************************
    // Get Instance
    //**************************************************************************
    //**************************************************************************
    public static function Instance($type)
    {
        //======================================================================
        // Return New DataSources Object
        //======================================================================
        return new static($type);
    }

    //**************************************************************************
    //**************************************************************************
    // Constructor function
    //**************************************************************************
    //**************************************************************************
    public function __construct($type)
    {
        $this->type_class = $this->GetDatabaseTypeClass($type);
        if (!$this->type_class) {
            throw new \Exception('Invalid database type given.');
        }
        $this->type = $type;
    }

    //**************************************************************************
    //**************************************************************************
    /**
     * Get the column data types that require quotes for a specified database type
     *
     * @return array An array of column types that require quotes (non-bind parameters)
     */
    //**************************************************************************
    //**************************************************************************
    public function QuotedTypes()
    {
        return call_user_func_array([$this->type_class, 'QuotedTypes'], []);
    }

    //**************************************************************************
    /**
     * Get the structure for a given database table
     *
     * @param string Data source handle
     * @param string Table name
     * @param string Schema name
     * @return array Table Structure
     */
    //**************************************************************************
    public function TableStructure($data_source, $table, $schema=false)
    {
        return call_user_func_array([$this->type_class, 'TableStructure'], [$data_source, $table, $schema]);
    }

    //*************************************************************************
    //*************************************************************************
    /**
     * Determine Schema from a Table
     *
     * @return array An Array containing the table name and schema found.
     */
    //*************************************************************************
    //*************************************************************************
    public function DetermineSchema($data_source, $table, $default=false, $separator=false)
    {
        return call_user_func_array([$this->type_class, 'DetermineSchema'], [$data_source, $table, $default, $separator]);
    }

    //%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    //%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    // Internal Methods
    //%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    //%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

    //**************************************************************************
    //**************************************************************************
    /**
     * Get Database Type Class
     *
     * @param mixed Database type or data source handle
     * @return string The database type structure class
     */
    //**************************************************************************
    //**************************************************************************
    protected function GetDatabaseTypeClass($db_type)
    {
        //======================================================================
        // Cast $db_type as string and validate
        //======================================================================
        settype($db_type, 'string');
        if (!$db_type) { return false; }

        //======================================================================
        // Set Class Stub
        //======================================================================
        $stub = '\phpOpenFW\Database\Structure\DatabaseTypes';

        //======================================================================
        // Return Database Type Class
        //======================================================================
        switch ($db_type) {

            //-------------------------------------------------------------
            // MySQL
            //-------------------------------------------------------------
            case 'mysqli':
            case 'mysql':
                return $stub . '\MySQL';
                break;

            //-------------------------------------------------------------
            // PostgreSQL
            //-------------------------------------------------------------
            case 'pgsql':
                return $stub . '\PgSQL';
                break;

            //-------------------------------------------------------------
            // Oracle
            //-------------------------------------------------------------
            case 'oracle':
                return $stub . '\Oracle';
                break;

            //-------------------------------------------------------------
            // SQL Server
            //-------------------------------------------------------------
            case 'sqlsrv':
            case 'mssql':
                return $stub . '\SQLSrv';
                break;

            //-------------------------------------------------------------
            // SQLite
            //-------------------------------------------------------------
            case 'sqlite':
                return $stub . '\SQLite';
                break;

            //-------------------------------------------------------------
            // IBM DB2
            //-------------------------------------------------------------
            case 'db2':
                return $stub . '\DB2';
                break;

        }

        return false;
    }

}
