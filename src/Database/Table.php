<?php
//******************************************************************************
//******************************************************************************
/**
 * Data Query class
 *
 * @package         phpOpenFW
 * @author          Christian J. Clark
 * @copyright       Copyright (c) Christian J. Clark
 * @license         https://mit-license.org
 */
//******************************************************************************
//******************************************************************************

namespace phpOpenFW\Database;

abstract class Table
{
    //==========================================================================
    // Class Members
    //==========================================================================
    protected static $data_source = '';
    protected static $table = false; 

    //--------------------------------------------------------------------------
    // Select Members
    //--------------------------------------------------------------------------
    protected static $select_view = false;
    protected static $select_limit = 1000;
    protected static $select_order_by = 'id desc';
    protected static $select_debug = false;
    protected static $select_debug_only = false;
    protected static $select_return_debug = false;
    protected static $select_return_query = false;
    protected static $select_execute_args = [];

    //--------------------------------------------------------------------------
    // Insert Members
    //--------------------------------------------------------------------------
    protected static $insert_debug = false;
    protected static $insert_debug_only = false;
    protected static $insert_return_debug = false;
    protected static $insert_return_query = false;
    protected static $insert_execute_args = [];

    //--------------------------------------------------------------------------
    // Update Members
    //--------------------------------------------------------------------------
    protected static $update_limit = 1;
    protected static $update_debug = false;
    protected static $update_debug_only = false;
    protected static $update_return_debug = false;
    protected static $update_return_query = false;
    protected static $update_execute_args = [];

    //--------------------------------------------------------------------------
    // Delete Members
    //--------------------------------------------------------------------------
    protected static $delete_limit = 1;
    protected static $delete_debug = false;
    protected static $delete_debug_only = false;
    protected static $delete_return_debug = false;
    protected static $delete_return_query = false;
    protected static $delete_execute_args = [];

    //==========================================================================
    //==========================================================================
    // Select Records
    //==========================================================================
    //==========================================================================
    public static function Select(Array $wheres, Array $args=[])
    {
        //----------------------------------------------------------------------
        // Parse & Extract Args
        //----------------------------------------------------------------------
        $parsed_args = self::ParseArgs(__METHOD__, $args);
        extract($parsed_args['build']);

        //----------------------------------------------------------------------
        // Start Query
        //----------------------------------------------------------------------
        $query = SQL::Select($table, $data_source)
        ->Select($table . '.*');

        //----------------------------------------------------------------------
        // Order By
        //----------------------------------------------------------------------
        if (!empty($order_by)) {
            $query->OrderBy($order_by);
        }

        //----------------------------------------------------------------------
        // Limit
        //----------------------------------------------------------------------
        if (!empty($order_by)) {
            $query->Limit($limit);
        }

        //----------------------------------------------------------------------
        // Build Select Where
        //----------------------------------------------------------------------
        self::BuildSelectWhere($query, $wheres, $args);

        //----------------------------------------------------------------------
        // Execute and Return Results
        //----------------------------------------------------------------------
        return self::Finish($query, $args['finish']);
    }

    //==========================================================================
    //==========================================================================
    // Select Query
    //==========================================================================
    //==========================================================================
    public static function GetSelectQuery(Array $wheres, Array $args=[])
    {
        $args['return_query'] = true;
        return self::Select($wheres, $args);
    }

    //==========================================================================
    //==========================================================================
    // Select One
    //==========================================================================
    //==========================================================================
    public static function SelectOne(Array $wheres, Array $args=[])
    {
        $recs = self::Select($wheres, $args);
        if ($recs) {
            if (count($recs) == 1) {
                return current($recs);
            }
            else {
                throw new \Exception('Unable to select one record for return. More than one record was found.');
            }
        }
        return [];
    }

    //%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    //%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    // Insert Methods
    //%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    //%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

    //==========================================================================
    //==========================================================================
    // Insert
    //==========================================================================
    //==========================================================================
    public static function Insert(Array $values, Array $args=[])
    {
        //----------------------------------------------------------------------
        // Parse & Extract Args
        //----------------------------------------------------------------------
        $parsed_args = self::ParseArgs(__METHOD__, $args);
        extract($parsed_args['build']);

        //----------------------------------------------------------------------
        // Start Query
        //----------------------------------------------------------------------
        $query = SQL::Insert($table, $data_source);

        //----------------------------------------------------------------------
        // Build Values
        //----------------------------------------------------------------------
        self::BuildValues($query, $values, $args);

        //----------------------------------------------------------------------
        // Execute and Return Results
        //----------------------------------------------------------------------
        return self::Finish($query, $args['finish']);
    }

    //%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    //%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    // Update Methods
    //%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    //%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

    //==========================================================================
    //==========================================================================
    // Update
    //==========================================================================
    //==========================================================================
    public static function Update($wheres, Array $values, Array $args=[])
    {
        //----------------------------------------------------------------------
        // Parse & Extract Args
        //----------------------------------------------------------------------
        $parsed_args = self::ParseArgs(__METHOD__, $args);
        extract($parsed_args['build']);

        //----------------------------------------------------------------------
        // Start Query
        //----------------------------------------------------------------------
        $query = SQL::Update($table, $data_source);

        //----------------------------------------------------------------------
        // Build Values
        //----------------------------------------------------------------------
        self::BuildValues($query, $values, $args);

        //----------------------------------------------------------------------
        // Build Update Where
        //----------------------------------------------------------------------
        self::BuildUpdateWhere($query, $wheres, $args);

        //----------------------------------------------------------------------
        // Execute and Return Results
        //----------------------------------------------------------------------
        return self::Finish($query, $args['finish']);
    }

    //==========================================================================
    //==========================================================================
    // Update One
    //==========================================================================
    //==========================================================================
    public static function UpdateOne($wheres, Array $values, Array $args=[])
    {
        $args['limit'] = 1;
        return self::Update($wheres, $values, $args);
    }

    //%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    //%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    // Delete Methods
    //%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    //%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

    //==========================================================================
    //==========================================================================
    // Delete
    //==========================================================================
    //==========================================================================
    public static function Delete($wheres, Array $args=[])
    {
        //----------------------------------------------------------------------
        // Parse & Extract Args
        //----------------------------------------------------------------------
        $parsed_args = self::ParseArgs(__METHOD__, $args);
        extract($parsed_args['build']);


        //----------------------------------------------------------------------
        // Build Delete Where
        //----------------------------------------------------------------------
        self::BuildUpdateWhere($query, $wheres, $args);

        //----------------------------------------------------------------------
        // Execute and Return Results
        //----------------------------------------------------------------------
        return self::Finish($query, $args['finish']);
    }

    //==========================================================================
    //==========================================================================
    // Delete One
    //==========================================================================
    //==========================================================================
    public static function DeleteOne($wheres, Array $args=[])
    {
        $args['limit'] = 1;
        return self::Delete($wheres, $args);
    }

    //%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    //%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    // Alias Methods
    //%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    //%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

    //==========================================================================
    //==========================================================================
    // Get Records (Alias to Select)
    //==========================================================================
    //==========================================================================
    public static function Get(Array $args=[])
    {
        return self::Select($args);
    }

    //==========================================================================
    //==========================================================================
    // Get One Record (Alias to SelectOne)
    //==========================================================================
    //==========================================================================
    public static function GetOne(Array $args=[])
    {
        return self::SelectOne($args);
    }

    //%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    //%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    // Internal Methods
    //%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    //%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

    //==========================================================================
    //==========================================================================
    // Get Data Source
    //==========================================================================
    //==========================================================================
    protected static function GetDataSource(Array $args=[])
    {
        $data_source = self::$data_source;
        if (!empty($args['data_source'])) {
            return $args['data_source'];
        }
        return $data_source;
    }

    //==========================================================================
    //==========================================================================
    // Get Data Source
    //==========================================================================
    //==========================================================================
    protected static function GetTable($method, Array $args=[])
    {
        $method = strtolower($method);
        $table = self::$table;
        if (!empty($args['table'])) {
            $table = $args['table'];
        }
        if ($method == 'select') {
            if (!empty(self::$select_view)) {
                $table = self::$select_view;
            }
            if (!empty($args['select_view'])) {
                $table = $args['select_view'];
            }
        }
        if (empty($table)) {
            throw new \Exception('Unable to determine database table or view.');
        }
        return $table;
    }

    //==========================================================================
    //==========================================================================
    // Get Table Structure
    //==========================================================================
    //==========================================================================
    protected static function GetTableStructure()
    {
        if (empty(self::$table_info)) {
            self::$table_info = \phpOpenFW\Database\Structure\Table::TableStructure(self::$data_source, $table);
        }
        return self::$table_info;
    }

    //==========================================================================
    //==========================================================================
    // Parse Args
    //==========================================================================
    //==========================================================================
    protected static function ParseArgs($method, Array $args=[])
    {
        //----------------------------------------------------------------------
        // Lowercase method name
        //----------------------------------------------------------------------
        $method = strtolower($method);

        //----------------------------------------------------------------------
        // Get Data Source
        //----------------------------------------------------------------------
        $data_source = self::GetDataSource($args);

        //----------------------------------------------------------------------
        // Get Table
        //----------------------------------------------------------------------
        $table = self::GetTable($method, $args);

        //----------------------------------------------------------------------
        // Start Return Args
        //----------------------------------------------------------------------
        $return_args = [
            'build' => [
                'data_source' => $data_source,
                'table' => $table
            ],
            'finish' => []
        ];

        //----------------------------------------------------------------------
        // Select Args
        //----------------------------------------------------------------------
        if ($method == 'select') {
            $order_by = self::$select_order_by;
            $limit = self::$select_limit;
            $debug = self::$select_debug;
            $debug_only = self::$select_debug_only;
            $return_debug = self::$select_return_debug;
            $return_query = self::$select_return_query;
            $execute_args = self::$select_execute_args;
        }
        //----------------------------------------------------------------------
        // Insert Args
        //----------------------------------------------------------------------
        else if ($method == 'insert') {
            $debug = self::$insert_debug;
            $debug_only = self::$insert_debug_only;
            $return_debug = self::$insert_return_debug;
            $return_query = self::$insert_return_query;
            $execute_args = self::$insert_execute_args;
        }
        //----------------------------------------------------------------------
        // Update Args
        //----------------------------------------------------------------------
        else if ($method == 'update') {
            $limit = self::$update_limit;
            $debug = self::$update_debug;
            $debug_only = self::$update_debug_only;
            $return_debug = self::$update_return_debug;
            $return_query = self::$update_return_query;
            $execute_args = self::$update_execute_args;
        }
        //----------------------------------------------------------------------
        // Delete Args
        //----------------------------------------------------------------------
        else if ($method == 'delete') {
            $limit = self::$delete_limit;
            $debug = self::$delete_debug;
            $debug_only = self::$delete_debug_only;
            $return_debug = self::$delete_return_debug;
            $return_query = self::$delete_return_query;
            $execute_args = self::$delete_execute_args;
        }

        //----------------------------------------------------------------------
        // Extract Args
        //----------------------------------------------------------------------
        extract($args);

        //----------------------------------------------------------------------
        // Set Return Args
        //----------------------------------------------------------------------
        $return_args['finish'] = [
            'debug' => $debug,
            'debug_only' => $debug_only,
            'return_debug' => $return_debug,
            'return_query' => $return_query,
            'execute_args' => $execute_args,
        ];
        if (isset($order_by)) {
            $return_args['build']['order_by'] = $order_by;
        }
        if (isset($limit)) {
            $return_args['build']['limit'] = $limit;
        }

        //----------------------------------------------------------------------
        // Return Args
        //----------------------------------------------------------------------
        return $return_args;
    }

    //==========================================================================
    //==========================================================================
    // Build Values
    //==========================================================================
    //==========================================================================
    protected static function BuildValues($query, Array $values, Array $args=[])
    {
        
    }

    //%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    //%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    // Build Where Methods
    //%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    //%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

    //=========================================================================
    //=========================================================================
    // Generic Build Where Method
    //=========================================================================
    //=========================================================================
    protected static function BuildWhere($query, Array $wheres, Array $args=[])
    {
        //----------------------------------------------------------------------
        // Extract Args, Wheres
        //----------------------------------------------------------------------
        extract($args);
        extract($wheres, EXTR_SKIP);
        
        //----------------------------------------------------------------------
        // ID(s)
        //----------------------------------------------------------------------
        if (!empty($id)) {
            $query->Where($table . '.id', $id, 'i');
        }
        else if (!empty($ids)) {
            $query->WhereIn($table . '.id', $ids, 'i');
        }
    }

    //=========================================================================
    //=========================================================================
    // Build Select Where Method
    //=========================================================================
    //=========================================================================
    protected static function BuildSelectWhere($query, Array $wheres, Array $args=[])
    {
        self::BuildWhere($query, $wheres, $args);
    }

    //=========================================================================
    //=========================================================================
    // Build Update Where Method
    //=========================================================================
    //=========================================================================
    public static function BuildUpdateWhere($query, Array $wheres, Array $args=[])
    {
        self::BuildWhere($query, $wheres, $args);
    }

    //=========================================================================
    //=========================================================================
    // Build Delete Where Method
    //=========================================================================
    //=========================================================================
    public static function BuildSelectWhere($query, Array $wheres, Array $args=[])
    {
        self::BuildWhere($query, $wheres, $args);
    }

    //%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    //%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    // Finish
    //%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    //%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    protected static function Finish($query, Array $args)
    {
        //----------------------------------------------------------------------
        // Extract Args
        //----------------------------------------------------------------------
        extract($args, EXTR_SKIP);

        //----------------------------------------------------------------------
        // Debug
        //----------------------------------------------------------------------
        if ($debug || $debug_only) {
            if ($return_debug) {
                return [
                    'query' => $query,
                    'bind_params' => $query->GetBindParams()
                ];
            }
            else {
                print $query . "\n";
                print_r($query->GetBindParams());
            }
            if ($debug_only) {
                return;
            }
        }

        //----------------------------------------------------------------------
        // Return Query?
        //----------------------------------------------------------------------
        if (!empty($return_query)) {
            return $query;
        }

        //----------------------------------------------------------------------
        // Execute and Return Results
        //----------------------------------------------------------------------
        return $query->Execute($execute_args);
    }

}
